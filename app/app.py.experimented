#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 17 19:15:32 2021

@author: vishwas
"""
import pandas as pd
from flask import Flask, render_template, request
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pickle
import json
from os import path
# load the nlp model and tfidf vectorizer from disk


def get_abs_path(*paths):
    abs_path = path.abspath(path.join(*paths))
    return abs_path


model_pickle_file = get_abs_path('app/data/product_sentiment_model.pkl')
vectorizer_file = get_abs_path('app/data/tfidf_vectorizer.pkl')
data_file = get_abs_path('app/data/final_data.csv')

clf = pickle.load(open(model_pickle_file, 'rb'))
vectorizer = pickle.load(open(vectorizer_file, 'rb'))


def get_data():
    data = pd.read_csv(data_file)
    data2 = data.reset_index()
    indices = pd.Series(data2.index, index=data2['reviews_username'])
    all_users = [data2['reviews_username'][i] for i in range(len(data2['reviews_username']))]
    return data, indices, all_users


def create_sim(data=None):
    data, _ , _ = get_data()
    # creating a count matrix
    count = CountVectorizer(stop_words='english')
    # print(data['clean_text'])
    data = data[~(data['clean_text'].isnull())]
    print(data['clean_text'].isna().sum())
    count_matrix = count.fit_transform(data['clean_text'])
    # creating a similarity score matrix
    cosine_sim2 = cosine_similarity(count_matrix)
    # sim = cosine_similarity(count_matrix)
    return data, cosine_sim2, count_matrix

#
# def get_reviews(product_name):
#     data = get_data()
#     reviews = data[data['name'] == product_name]['reviews_text']
#     return reviews


def get_recommendations(user_name, data, indices, all_users):
    # user_name = user_name.lower()
    # data = get_data()
    # try:
    #     data, cosine_sim = create_sim(data)
    #     data.head()
    #     cosine_sim.shape
    # except Exception as ex:
    #     print("Exception occured")
    #     raise ex
    try:
        data.head()
        cosine_sim.shape
        count_matrix
    except:
        data, cosine_sim, count_matrix = create_sim()

    if user_name not in all_users:
        return (
            'Sorry! The user you searched is not in our database. Please check the spelling or try with some other user')
    else:
        cosine_sim = cosine_similarity(count_matrix, count_matrix)
        idx = indices[user_name]
        print(len(idx))
        sim_scores = list(enumerate(cosine_sim[idx]))
        print(sim_scores)
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:11]
        product_indices = [i[0] for i in sim_scores]
        products_name = data['name'].iloc[product_indices]
        products_brand = data['brand'].iloc[product_indices]
        manufacturers = data['manufacturer'].iloc[product_indices]
        return_df = pd.DataFrame(columns=['Product', 'Brand', 'Manufacturer'])
        return_df['Product'] = products_name
        return_df['Brand'] = products_brand
        return_df['Manufacturer'] = manufacturers
        return return_df

        #
        # i = data.loc[data['reviews_username'] == user_name].index[0]
        # lst = list(enumerate(sim[i]))
        # lst = sorted(lst, key=lambda x: x[1], reverse=True)
        # lst = lst[1:11]
        # l = []
        # for i in range(len(lst)):
        #     a = lst[i][0]
        #     l.append(data['name'][a])
        # return l


def get_suggestions():
    data, indices, all_users = get_data()
    users = set(all_users)
    return json.dumps(list(users))


app = Flask(__name__)

@app.route("/")
def home():
    suggestions = get_suggestions()
    print("Got suggestions : {}".format(len(suggestions)))
    return render_template('home.html', suggestions=suggestions)


@app.route("/recommend", methods=["POST"])
def recommend():
    # 1. Get user from payload
    user = request.get_data().decode('utf-8')  # get user name from the URL
    if user is not None:
        user = user.split('=')[1]

    # user = user.upper()
    # 2. Get top 5 recommendations
    data, indices, all_users = get_data()
    product_recommendations = get_recommendations(user, data, indices, all_users)
    print(len(product_recommendations))
    print(type(product_recommendations))
    if isinstance(product_recommendations, str):  # no such user found in the database
        suggestions = get_suggestions()
        print("Got suggestions : {}".format(len(suggestions)))
        return render_template('home.html', user_not_found=True, suggestions=suggestions)
    else:
        product_cards = []
        # product_recommendations = set(product_recommendations)
        for i in range(len(product_recommendations)):
            product_card = {'product_name': product_recommendations.name.iloc[i],
                            'manufacturer': product_recommendations.manufacturer.iloc[i],
                            'brand': product_recommendations.brand.iloc[i]}
            product_cards.append(product_card)

        # for product in product_recommendations:
        #     # print(product)
        #     # name = product
        #     # manufacturer = data[data['name'] == product['name']]['manufacturer']
        #     # brand = data[data['name'] == product['name']]['brand']
        #
        #     product_card = {'product_name': name, 'manufacturer': "dummy", 'brand': "dummy"}
        #     product_cards.append(product_card)

        # get user names for auto completion
        # suggestions = get_suggestions()

        return render_template('recommend.html', product_cards=product_cards)

#
# if __name__ == '__main__':
#     app.run(debug=True)
